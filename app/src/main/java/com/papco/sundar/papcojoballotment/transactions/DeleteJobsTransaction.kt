package com.papco.sundar.papcojoballotment.transactionsimport com.google.firebase.firestore.*import com.papco.sundar.papcojoballotment.documents.Placeimport com.papco.sundar.papcojoballotment.documents.PrintJobimport com.papco.sundar.papcojoballotment.utility.Durationclass DeleteJobsTransaction(private val jobIds: MutableSet<String>) : Transaction.Function<Unit> {    private val db = FirebaseFirestore.getInstance()    private val poolDocReference = db.collection("places").document("pool")    private lateinit var jobReferenceToFetch: DocumentReference    private lateinit var fetchedJobDocument: DocumentSnapshot    private var job: PrintJob? = null    private var totalDuration = Duration()    override fun apply(transaction: Transaction) {        //Make sure pool document exists        val poolDocument = transaction.get(poolDocReference)        val pool: Place?        if (poolDocument.exists()) {            pool = poolDocument.toObject(Place::class.java)            if (pool == null)                throw FirebaseFirestoreException(                    "Pool null error",                    FirebaseFirestoreException.Code.ABORTED                )        } else            throw FirebaseFirestoreException(                "Pool document not found",                FirebaseFirestoreException.Code.ABORTED            )        //Fetch job documents to calculate total time deduction        for (id in jobIds) {            jobReferenceToFetch = db.collection("places")                .document("pool").collection("jobs")                .document(id)            fetchedJobDocument = transaction.get(jobReferenceToFetch)            if (fetchedJobDocument.exists()) {                job = fetchedJobDocument.toObject(PrintJob::class.java)                job?.let {                    totalDuration += it.runningTime                }            }else                throw FirebaseFirestoreException(                    "Some Jobs not found",                    FirebaseFirestoreException.Code.ABORTED)        }        pool.jobCount-=jobIds.size        pool.duration-=totalDuration        var deleteRef:DocumentReference        for(id in jobIds){            deleteRef=db.collection("places").document("pool")                .collection("jobs").document(id)            transaction.delete(deleteRef)        }        transaction.set(poolDocReference,pool)    }}